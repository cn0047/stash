// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewListToteAssignmentsParams creates a new ListToteAssignmentsParams object
//
// There are no default values defined in the spec.
func NewListToteAssignmentsParams() ListToteAssignmentsParams {

	return ListToteAssignmentsParams{}
}

// ListToteAssignmentsParams contains all the bound params for the list tote assignments operation
// typically these are obtained from a http.Request
//
// swagger:parameters listToteAssignments
type ListToteAssignmentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	ClientID string
	/*
	  Required: true
	  In: path
	*/
	MfcID string
	/*
	  In: query
	*/
	OrderID *string
	/*
	  In: query
	*/
	View *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListToteAssignmentsParams() beforehand.
func (o *ListToteAssignmentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rClientID, rhkClientID, _ := route.Params.GetOK("clientId")
	if err := o.bindClientID(rClientID, rhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	rMfcID, rhkMfcID, _ := route.Params.GetOK("mfcId")
	if err := o.bindMfcID(rMfcID, rhkMfcID, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrderID, qhkOrderID, _ := qs.GetOK("orderId")
	if err := o.bindOrderID(qOrderID, qhkOrderID, route.Formats); err != nil {
		res = append(res, err)
	}

	qView, qhkView, _ := qs.GetOK("view")
	if err := o.bindView(qView, qhkView, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from path.
func (o *ListToteAssignmentsParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClientID = raw

	return nil
}

// bindMfcID binds and validates parameter MfcID from path.
func (o *ListToteAssignmentsParams) bindMfcID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.MfcID = raw

	return nil
}

// bindOrderID binds and validates parameter OrderID from query.
func (o *ListToteAssignmentsParams) bindOrderID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.OrderID = &raw

	return nil
}

// bindView binds and validates parameter View from query.
func (o *ListToteAssignmentsParams) bindView(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.View = &raw

	if err := o.validateView(formats); err != nil {
		return err
	}

	return nil
}

// validateView carries on validations for parameter View
func (o *ListToteAssignmentsParams) validateView(formats strfmt.Registry) error {

	if err := validate.EnumCase("view", "query", *o.View, []interface{}{"groupedByOrder"}, true); err != nil {
		return err
	}

	return nil
}
