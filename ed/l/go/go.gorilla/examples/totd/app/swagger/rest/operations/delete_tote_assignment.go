// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteToteAssignmentHandlerFunc turns a function with the right signature into a delete tote assignment handler
type DeleteToteAssignmentHandlerFunc func(DeleteToteAssignmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteToteAssignmentHandlerFunc) Handle(params DeleteToteAssignmentParams) middleware.Responder {
	return fn(params)
}

// DeleteToteAssignmentHandler interface for that can handle valid delete tote assignment params
type DeleteToteAssignmentHandler interface {
	Handle(DeleteToteAssignmentParams) middleware.Responder
}

// NewDeleteToteAssignment creates a new http.Handler for the delete tote assignment operation
func NewDeleteToteAssignment(ctx *middleware.Context, handler DeleteToteAssignmentHandler) *DeleteToteAssignment {
	return &DeleteToteAssignment{Context: ctx, Handler: handler}
}

/* DeleteToteAssignment swagger:route DELETE /clients/{clientId}/mfcs/{mfcId}/toteAssignments deleteToteAssignment

Delete tote assignment.

*/
type DeleteToteAssignment struct {
	Context *middleware.Context
	Handler DeleteToteAssignmentHandler
}

func (o *DeleteToteAssignment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteToteAssignmentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
