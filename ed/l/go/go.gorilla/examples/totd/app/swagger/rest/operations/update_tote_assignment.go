// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateToteAssignmentHandlerFunc turns a function with the right signature into a update tote assignment handler
type UpdateToteAssignmentHandlerFunc func(UpdateToteAssignmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateToteAssignmentHandlerFunc) Handle(params UpdateToteAssignmentParams) middleware.Responder {
	return fn(params)
}

// UpdateToteAssignmentHandler interface for that can handle valid update tote assignment params
type UpdateToteAssignmentHandler interface {
	Handle(UpdateToteAssignmentParams) middleware.Responder
}

// NewUpdateToteAssignment creates a new http.Handler for the update tote assignment operation
func NewUpdateToteAssignment(ctx *middleware.Context, handler UpdateToteAssignmentHandler) *UpdateToteAssignment {
	return &UpdateToteAssignment{Context: ctx, Handler: handler}
}

/* UpdateToteAssignment swagger:route PATCH /clients/{clientId}/mfcs/{mfcId}/toteAssignments/{toteAssignmentId} updateToteAssignment

Update tote assignment (not entire resource but only provided attributes like: laneId).

*/
type UpdateToteAssignment struct {
	Context *middleware.Context
	Handler UpdateToteAssignmentHandler
}

func (o *UpdateToteAssignment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateToteAssignmentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
