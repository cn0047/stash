// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewDeleteToteAssignmentParams creates a new DeleteToteAssignmentParams object
//
// There are no default values defined in the spec.
func NewDeleteToteAssignmentParams() DeleteToteAssignmentParams {

	return DeleteToteAssignmentParams{}
}

// DeleteToteAssignmentParams contains all the bound params for the delete tote assignment operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteToteAssignment
type DeleteToteAssignmentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	ClientID string
	/*
	  Required: true
	  In: path
	*/
	MfcID string
	/*
	  Required: true
	  In: query
	  Collection Format: multi
	*/
	ToteID []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteToteAssignmentParams() beforehand.
func (o *DeleteToteAssignmentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rClientID, rhkClientID, _ := route.Params.GetOK("clientId")
	if err := o.bindClientID(rClientID, rhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	rMfcID, rhkMfcID, _ := route.Params.GetOK("mfcId")
	if err := o.bindMfcID(rMfcID, rhkMfcID, route.Formats); err != nil {
		res = append(res, err)
	}

	qToteID, qhkToteID, _ := qs.GetOK("toteId")
	if err := o.bindToteID(qToteID, qhkToteID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from path.
func (o *DeleteToteAssignmentParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClientID = raw

	return nil
}

// bindMfcID binds and validates parameter MfcID from path.
func (o *DeleteToteAssignmentParams) bindMfcID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.MfcID = raw

	return nil
}

// bindToteID binds and validates array parameter ToteID from query.
//
// Arrays are parsed according to CollectionFormat: "multi" (defaults to "csv" when empty).
func (o *DeleteToteAssignmentParams) bindToteID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("toteId", "query", rawData)
	}
	// CollectionFormat: multi
	toteIDIC := rawData
	if len(toteIDIC) == 0 {
		return errors.Required("toteId", "query", toteIDIC)
	}

	var toteIDIR []string
	for _, toteIDIV := range toteIDIC {
		toteIDI := toteIDIV

		toteIDIR = append(toteIDIR, toteIDI)
	}

	o.ToteID = toteIDIR

	return nil
}
