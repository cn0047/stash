// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/to-com/poc-td/app/swagger/restmodel"
)

// NewCreateToteAssignmentParams creates a new CreateToteAssignmentParams object
//
// There are no default values defined in the spec.
func NewCreateToteAssignmentParams() CreateToteAssignmentParams {

	return CreateToteAssignmentParams{}
}

// CreateToteAssignmentParams contains all the bound params for the create tote assignment operation
// typically these are obtained from a http.Request
//
// swagger:parameters createToteAssignment
type CreateToteAssignmentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	Body *restmodel.CreateToteAssignmentRequest
	/*
	  Required: true
	  In: path
	*/
	ClientID string
	/*Use it only for development purposes.
	  In: query
	*/
	DryRun *bool
	/*
	  Required: true
	  In: path
	*/
	MfcID string
	/*
	  Required: true
	  In: path
	*/
	ToteAssignmentID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateToteAssignmentParams() beforehand.
func (o *CreateToteAssignmentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body restmodel.CreateToteAssignmentRequest
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(context.Background())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}

	rClientID, rhkClientID, _ := route.Params.GetOK("clientId")
	if err := o.bindClientID(rClientID, rhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	qDryRun, qhkDryRun, _ := qs.GetOK("dryRun")
	if err := o.bindDryRun(qDryRun, qhkDryRun, route.Formats); err != nil {
		res = append(res, err)
	}

	rMfcID, rhkMfcID, _ := route.Params.GetOK("mfcId")
	if err := o.bindMfcID(rMfcID, rhkMfcID, route.Formats); err != nil {
		res = append(res, err)
	}

	rToteAssignmentID, rhkToteAssignmentID, _ := route.Params.GetOK("toteAssignmentId")
	if err := o.bindToteAssignmentID(rToteAssignmentID, rhkToteAssignmentID, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClientID binds and validates parameter ClientID from path.
func (o *CreateToteAssignmentParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ClientID = raw

	return nil
}

// bindDryRun binds and validates parameter DryRun from query.
func (o *CreateToteAssignmentParams) bindDryRun(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("dryRun", "query", "bool", raw)
	}
	o.DryRun = &value

	return nil
}

// bindMfcID binds and validates parameter MfcID from path.
func (o *CreateToteAssignmentParams) bindMfcID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.MfcID = raw

	return nil
}

// bindToteAssignmentID binds and validates parameter ToteAssignmentID from path.
func (o *CreateToteAssignmentParams) bindToteAssignmentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ToteAssignmentID = raw

	return nil
}
