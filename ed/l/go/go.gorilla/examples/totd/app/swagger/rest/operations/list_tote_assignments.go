// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListToteAssignmentsHandlerFunc turns a function with the right signature into a list tote assignments handler
type ListToteAssignmentsHandlerFunc func(ListToteAssignmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListToteAssignmentsHandlerFunc) Handle(params ListToteAssignmentsParams) middleware.Responder {
	return fn(params)
}

// ListToteAssignmentsHandler interface for that can handle valid list tote assignments params
type ListToteAssignmentsHandler interface {
	Handle(ListToteAssignmentsParams) middleware.Responder
}

// NewListToteAssignments creates a new http.Handler for the list tote assignments operation
func NewListToteAssignments(ctx *middleware.Context, handler ListToteAssignmentsHandler) *ListToteAssignments {
	return &ListToteAssignments{Context: ctx, Handler: handler}
}

/* ListToteAssignments swagger:route GET /clients/{clientId}/mfcs/{mfcId}/toteAssignments listToteAssignments

List tote assignments.

*/
type ListToteAssignments struct {
	Context *middleware.Context
	Handler ListToteAssignmentsHandler
}

func (o *ListToteAssignments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListToteAssignmentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
