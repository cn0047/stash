// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/to-com/wp/internal/dto"
)

// MockBusiness is a mock of Business interface.
type MockBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessMockRecorder
}

// MockBusinessMockRecorder is the mock recorder for MockBusiness.
type MockBusinessMockRecorder struct {
	mock *MockBusiness
}

// NewMockBusiness creates a new mock instance.
func NewMockBusiness(ctrl *gomock.Controller) *MockBusiness {
	mock := &MockBusiness{ctrl: ctrl}
	mock.recorder = &MockBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusiness) EXPECT() *MockBusinessMockRecorder {
	return m.recorder
}

// Createwp mocks base method.
func (m *MockBusiness) Createwp(ctx context.Context, wp dto.wpRequest) (dto.wpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Createwp", ctx, wp)
	ret0, _ := ret[0].(dto.wpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Createwp indicates an expected call of Createwp.
func (mr *MockBusinessMockRecorder) Createwp(ctx, wp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Createwp", reflect.TypeOf((*MockBusiness)(nil).Createwp), ctx, wp)
}

// FireTriggers mocks base method.
func (m *MockBusiness) FireTriggers(ctx context.Context) (dto.FireTriggersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FireTriggers", ctx)
	ret0, _ := ret[0].(dto.FireTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FireTriggers indicates an expected call of FireTriggers.
func (mr *MockBusinessMockRecorder) FireTriggers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FireTriggers", reflect.TypeOf((*MockBusiness)(nil).FireTriggers), ctx)
}

// GenerateTriggers mocks base method.
func (m *MockBusiness) GenerateTriggers(ctx context.Context) (dto.GenerateTriggersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTriggers", ctx)
	ret0, _ := ret[0].(dto.GenerateTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTriggers indicates an expected call of GenerateTriggers.
func (mr *MockBusinessMockRecorder) GenerateTriggers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTriggers", reflect.TypeOf((*MockBusiness)(nil).GenerateTriggers), ctx)
}

// GetTriggers mocks base method.
func (m *MockBusiness) GetTriggers(ctx context.Context, retailerID, mfcID string) (dto.GetTriggersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers", ctx, retailerID, mfcID)
	ret0, _ := ret[0].(dto.GetTriggersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *MockBusinessMockRecorder) GetTriggers(ctx, retailerID, mfcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockBusiness)(nil).GetTriggers), ctx, retailerID, mfcID)
}

// Getwp mocks base method.
func (m *MockBusiness) Getwp(ctx context.Context, retailerID, mfcID string) (dto.wpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwp", ctx, retailerID, mfcID)
	ret0, _ := ret[0].(dto.wpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwp indicates an expected call of Getwp.
func (mr *MockBusinessMockRecorder) Getwp(ctx, retailerID, mfcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwp", reflect.TypeOf((*MockBusiness)(nil).Getwp), ctx, retailerID, mfcID)
}

// MockAuthentication is a mock of Authentication interface.
type MockAuthentication struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticationMockRecorder
}

// MockAuthenticationMockRecorder is the mock recorder for MockAuthentication.
type MockAuthenticationMockRecorder struct {
	mock *MockAuthentication
}

// NewMockAuthentication creates a new mock instance.
func NewMockAuthentication(ctrl *gomock.Controller) *MockAuthentication {
	mock := &MockAuthentication{ctrl: ctrl}
	mock.recorder = &MockAuthenticationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentication) EXPECT() *MockAuthenticationMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockAuthentication) CheckUser(ctx context.Context, retailerID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, retailerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockAuthenticationMockRecorder) CheckUser(ctx, retailerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockAuthentication)(nil).CheckUser), ctx, retailerID)
}
