// Code generated by MockGen. DO NOT EDIT.
// Source: business.go

// Package mockbusiness is a generated GoMock package.
package mockbusiness

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/to-com/wp/internal/repository"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CreateTriggers mocks base method.
func (m *MockDataStore) CreateTriggers(ctx context.Context, triggers []repository.Trigger) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTriggers", ctx, triggers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTriggers indicates an expected call of CreateTriggers.
func (mr *MockDataStoreMockRecorder) CreateTriggers(ctx, triggers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggers", reflect.TypeOf((*MockDataStore)(nil).CreateTriggers), ctx, triggers)
}

// Createwp mocks base method.
func (m *MockDataStore) Createwp(ctx context.Context, wp repository.wp) (repository.wp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Createwp", ctx, wp)
	ret0, _ := ret[0].(repository.wp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Createwp indicates an expected call of Createwp.
func (mr *MockDataStoreMockRecorder) Createwp(ctx, wp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Createwp", reflect.TypeOf((*MockDataStore)(nil).Createwp), ctx, wp)
}

// GetScheduleItems mocks base method.
func (m *MockDataStore) GetScheduleItems(ctx context.Context) ([]repository.ScheduleItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleItems", ctx)
	ret0, _ := ret[0].([]repository.ScheduleItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleItems indicates an expected call of GetScheduleItems.
func (mr *MockDataStoreMockRecorder) GetScheduleItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleItems", reflect.TypeOf((*MockDataStore)(nil).GetScheduleItems), ctx)
}

// GetTriggers mocks base method.
func (m *MockDataStore) GetTriggers(ctx context.Context, retailerID, mfcID string) ([]repository.TriggerItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers", ctx, retailerID, mfcID)
	ret0, _ := ret[0].([]repository.TriggerItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *MockDataStoreMockRecorder) GetTriggers(ctx, retailerID, mfcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockDataStore)(nil).GetTriggers), ctx, retailerID, mfcID)
}

// Getwp mocks base method.
func (m *MockDataStore) Getwp(ctx context.Context, retailerID, mfcID string) ([]repository.wpItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwp", ctx, retailerID, mfcID)
	ret0, _ := ret[0].([]repository.wpItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwp indicates an expected call of Getwp.
func (mr *MockDataStoreMockRecorder) Getwp(ctx, retailerID, mfcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwp", reflect.TypeOf((*MockDataStore)(nil).Getwp), ctx, retailerID, mfcID)
}

// MarkTriggersAsFired mocks base method.
func (m *MockDataStore) MarkTriggersAsFired(ctx context.Context, triggers []repository.TriggerItem, firedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTriggersAsFired", ctx, triggers, firedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTriggersAsFired indicates an expected call of MarkTriggersAsFired.
func (mr *MockDataStoreMockRecorder) MarkTriggersAsFired(ctx, triggers, firedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTriggersAsFired", reflect.TypeOf((*MockDataStore)(nil).MarkTriggersAsFired), ctx, triggers, firedAt)
}

// SelectTriggersToFire mocks base method.
func (m *MockDataStore) SelectTriggersToFire(ctx context.Context) ([]repository.TriggerItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTriggersToFire", ctx)
	ret0, _ := ret[0].([]repository.TriggerItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTriggersToFire indicates an expected call of SelectTriggersToFire.
func (mr *MockDataStoreMockRecorder) SelectTriggersToFire(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTriggersToFire", reflect.TypeOf((*MockDataStore)(nil).SelectTriggersToFire), ctx)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishMessage mocks base method.
func (m *MockPublisher) PublishMessage(ctx context.Context, topicID string, message any, attrs map[string]string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMessage", ctx, topicID, message, attrs)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishMessage indicates an expected call of PublishMessage.
func (mr *MockPublisherMockRecorder) PublishMessage(ctx, topicID, message, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessage", reflect.TypeOf((*MockPublisher)(nil).PublishMessage), ctx, topicID, message, attrs)
}
